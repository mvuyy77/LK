/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.learnkafka.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employees extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1188758060480583563L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employees\",\"namespace\":\"com.learnkafka.common\",\"fields\":[{\"name\":\"emp_no\",\"type\":\"int\"},{\"name\":\"birth_date\",\"type\":\"string\"},{\"name\":\"first_name\",\"type\":\"string\"},{\"name\":\"last_name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"hire_date\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employees> ENCODER =
      new BinaryMessageEncoder<Employees>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employees> DECODER =
      new BinaryMessageDecoder<Employees>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employees> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employees> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employees>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employees to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employees from a ByteBuffer. */
  public static Employees fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int emp_no;
  @Deprecated public java.lang.CharSequence birth_date;
  @Deprecated public java.lang.CharSequence first_name;
  @Deprecated public java.lang.CharSequence last_name;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public java.lang.CharSequence hire_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employees() {}

  /**
   * All-args constructor.
   * @param emp_no The new value for emp_no
   * @param birth_date The new value for birth_date
   * @param first_name The new value for first_name
   * @param last_name The new value for last_name
   * @param gender The new value for gender
   * @param hire_date The new value for hire_date
   */
  public Employees(java.lang.Integer emp_no, java.lang.CharSequence birth_date, java.lang.CharSequence first_name, java.lang.CharSequence last_name, java.lang.CharSequence gender, java.lang.CharSequence hire_date) {
    this.emp_no = emp_no;
    this.birth_date = birth_date;
    this.first_name = first_name;
    this.last_name = last_name;
    this.gender = gender;
    this.hire_date = hire_date;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emp_no;
    case 1: return birth_date;
    case 2: return first_name;
    case 3: return last_name;
    case 4: return gender;
    case 5: return hire_date;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emp_no = (java.lang.Integer)value$; break;
    case 1: birth_date = (java.lang.CharSequence)value$; break;
    case 2: first_name = (java.lang.CharSequence)value$; break;
    case 3: last_name = (java.lang.CharSequence)value$; break;
    case 4: gender = (java.lang.CharSequence)value$; break;
    case 5: hire_date = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emp_no' field.
   * @return The value of the 'emp_no' field.
   */
  public java.lang.Integer getEmpNo() {
    return emp_no;
  }

  /**
   * Sets the value of the 'emp_no' field.
   * @param value the value to set.
   */
  public void setEmpNo(java.lang.Integer value) {
    this.emp_no = value;
  }

  /**
   * Gets the value of the 'birth_date' field.
   * @return The value of the 'birth_date' field.
   */
  public java.lang.CharSequence getBirthDate() {
    return birth_date;
  }

  /**
   * Sets the value of the 'birth_date' field.
   * @param value the value to set.
   */
  public void setBirthDate(java.lang.CharSequence value) {
    this.birth_date = value;
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return The value of the 'first_name' field.
   */
  public java.lang.CharSequence getFirstName() {
    return first_name;
  }

  /**
   * Sets the value of the 'first_name' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * @return The value of the 'last_name' field.
   */
  public java.lang.CharSequence getLastName() {
    return last_name;
  }

  /**
   * Sets the value of the 'last_name' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.last_name = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'hire_date' field.
   * @return The value of the 'hire_date' field.
   */
  public java.lang.CharSequence getHireDate() {
    return hire_date;
  }

  /**
   * Sets the value of the 'hire_date' field.
   * @param value the value to set.
   */
  public void setHireDate(java.lang.CharSequence value) {
    this.hire_date = value;
  }

  /**
   * Creates a new Employees RecordBuilder.
   * @return A new Employees RecordBuilder
   */
  public static com.learnkafka.common.Employees.Builder newBuilder() {
    return new com.learnkafka.common.Employees.Builder();
  }

  /**
   * Creates a new Employees RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employees RecordBuilder
   */
  public static com.learnkafka.common.Employees.Builder newBuilder(com.learnkafka.common.Employees.Builder other) {
    return new com.learnkafka.common.Employees.Builder(other);
  }

  /**
   * Creates a new Employees RecordBuilder by copying an existing Employees instance.
   * @param other The existing instance to copy.
   * @return A new Employees RecordBuilder
   */
  public static com.learnkafka.common.Employees.Builder newBuilder(com.learnkafka.common.Employees other) {
    return new com.learnkafka.common.Employees.Builder(other);
  }

  /**
   * RecordBuilder for Employees instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employees>
    implements org.apache.avro.data.RecordBuilder<Employees> {

    private int emp_no;
    private java.lang.CharSequence birth_date;
    private java.lang.CharSequence first_name;
    private java.lang.CharSequence last_name;
    private java.lang.CharSequence gender;
    private java.lang.CharSequence hire_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.learnkafka.common.Employees.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emp_no)) {
        this.emp_no = data().deepCopy(fields()[0].schema(), other.emp_no);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.birth_date)) {
        this.birth_date = data().deepCopy(fields()[1].schema(), other.birth_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.first_name)) {
        this.first_name = data().deepCopy(fields()[2].schema(), other.first_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.last_name)) {
        this.last_name = data().deepCopy(fields()[3].schema(), other.last_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hire_date)) {
        this.hire_date = data().deepCopy(fields()[5].schema(), other.hire_date);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employees instance
     * @param other The existing instance to copy.
     */
    private Builder(com.learnkafka.common.Employees other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.emp_no)) {
        this.emp_no = data().deepCopy(fields()[0].schema(), other.emp_no);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.birth_date)) {
        this.birth_date = data().deepCopy(fields()[1].schema(), other.birth_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.first_name)) {
        this.first_name = data().deepCopy(fields()[2].schema(), other.first_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.last_name)) {
        this.last_name = data().deepCopy(fields()[3].schema(), other.last_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hire_date)) {
        this.hire_date = data().deepCopy(fields()[5].schema(), other.hire_date);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'emp_no' field.
      * @return The value.
      */
    public java.lang.Integer getEmpNo() {
      return emp_no;
    }

    /**
      * Sets the value of the 'emp_no' field.
      * @param value The value of 'emp_no'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setEmpNo(int value) {
      validate(fields()[0], value);
      this.emp_no = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'emp_no' field has been set.
      * @return True if the 'emp_no' field has been set, false otherwise.
      */
    public boolean hasEmpNo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'emp_no' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearEmpNo() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'birth_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getBirthDate() {
      return birth_date;
    }

    /**
      * Sets the value of the 'birth_date' field.
      * @param value The value of 'birth_date'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setBirthDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.birth_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'birth_date' field has been set.
      * @return True if the 'birth_date' field has been set, false otherwise.
      */
    public boolean hasBirthDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'birth_date' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearBirthDate() {
      birth_date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return first_name;
    }

    /**
      * Sets the value of the 'first_name' field.
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.first_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'first_name' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return last_name;
    }

    /**
      * Sets the value of the 'last_name' field.
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.last_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'last_name' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hire_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getHireDate() {
      return hire_date;
    }

    /**
      * Sets the value of the 'hire_date' field.
      * @param value The value of 'hire_date'.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder setHireDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.hire_date = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hire_date' field has been set.
      * @return True if the 'hire_date' field has been set, false otherwise.
      */
    public boolean hasHireDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hire_date' field.
      * @return This builder.
      */
    public com.learnkafka.common.Employees.Builder clearHireDate() {
      hire_date = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employees build() {
      try {
        Employees record = new Employees();
        record.emp_no = fieldSetFlags()[0] ? this.emp_no : (java.lang.Integer) defaultValue(fields()[0]);
        record.birth_date = fieldSetFlags()[1] ? this.birth_date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.first_name = fieldSetFlags()[2] ? this.first_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.last_name = fieldSetFlags()[3] ? this.last_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.gender = fieldSetFlags()[4] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.hire_date = fieldSetFlags()[5] ? this.hire_date : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employees>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employees>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employees>
    READER$ = (org.apache.avro.io.DatumReader<Employees>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
